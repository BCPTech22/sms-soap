
package dasniko.keycloak.authenticator.ma.gbp.digital.smsgateway.service;

import dasniko.keycloak.authenticator.soapdemo_wsdl.ObjectFactory;
//import soapdemo_wsdl.ObjectFactory;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 *
 */
@WebService(name = "soapdemo_wsdlPortType", targetNamespace = "soapdemo_wsdl")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface SoapdemoWsdlPortType {


    /**
     *
     * @param password
     * @param binary
     * @param from
     * @param hdsend
     * @param to
     * @param id
     * @param message
     * @param operator
     * @param username
     * @return
     *     returns java.lang.Integer
     */
    @WebMethod(operationName = "SendSMS", action = "soapdemo_wsdl#SendSMS")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "SendSMS", targetNamespace = "soapdemo_wsdl", className = "soapdemo_wsdl.SendSMS")
    @ResponseWrapper(localName = "SendSMSResponse", targetNamespace = "soapdemo_wsdl", className = "soapdemo_wsdl.SendSMSResponse")
    public Integer sendSMS(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "to", targetNamespace = "")
        String to,
        @WebParam(name = "message", targetNamespace = "")
        String message,
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "from", targetNamespace = "")
        String from,
        @WebParam(name = "hdsend", targetNamespace = "")
        String hdsend,
        @WebParam(name = "binary", targetNamespace = "")
        int binary,
        @WebParam(name = "operator", targetNamespace = "")
        String operator);

}
